/*
 * Copyright (C) 2015 Embest Technology Co., Ltd., - http://www.embest-tech.com
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 *
 * This dts is for embest own product:
 * SOM-PH8800 + BB-EPH1800
 */
/dts-v1/;

#include "am4372.dtsi"
#include <dt-bindings/pinctrl/am43xx.h>
#include <dt-bindings/pwm/pwm.h>
#include <dt-bindings/gpio/gpio.h>
#include <dt-bindings/input/input.h>

/ {
	model = "TI AM437x SK EVM";
	compatible = "ti,am437x-sk-evm","ti,am4372","ti,am43";

	aliases {
		display0 = &lcd0;
		serial1 = &uart1;
		serial3 = &uart3;
		serial5 = &uart5;
	};

	leds {
		pinctrl-names = "default";
		pinctrl-0 = <&user_leds>;

		compatible = "gpio-leds";

		led1 {
			label = "system_leds_d4";
			gpios = <&gpio5 12 GPIO_ACTIVE_HIGH>;
			linux,default-trigger = "none";
			default-state = "on";
		};

		led2 {
			label = "user_leds_d3";
			gpios = <&gpio5 10 GPIO_ACTIVE_HIGH>;
			linux,default-trigger = "none";
			default-state = "on";
		};
	};

	/* Generic GPIO buzzer device  as misc device */
	buzzer {
		pinctrl-names = "default";
		pinctrl-0 = <&buzzer_pin>;
		compatible = "gpio_buzzer";
		gpios = <&gpio0 4 GPIO_ACTIVE_HIGH>;
	};

	gpio_keys: gpio_keys {
		compatible = "gpio-keys";
		pinctrl-names = "default";
		pinctrl-0 = <&gpio_keys_pins_default>;
		#address-cells = <1>;
		#size-cells = <0>;

		switch@0 {
			label = "recovery-button";
			linux,code = <KEY_POWER>;
			gpios = <&gpio1 28 GPIO_ACTIVE_LOW>;
		};
	};
	
	sound {
		compatible = "simple-audio-card";
		simple-audio-card,name = "AM437x-SM8800";
		simple-audio-card,widgets =
			"Headphone", "Headphone Jack",
			"Microphone", "Microphone Jack";
		simple-audio-card,routing =
			"Headphone Jack",	"HPOUTL",
			"Headphone Jack",	"HPOUTR",
			"Microphone Jack",  "MICBIAS", 
			"IN1L", "Microphone Jack";
		simple-audio-card,format = "dsp_b";
		simple-audio-card,bitclock-master = <&sound_master>;
		simple-audio-card,frame-master = <&sound_master>;
		/*simple-audio-card,bitclock-inversion;*/

		simple-audio-card,cpu {
			sound-dai = <&mcasp0>;
			system-clock-frequency = <24000000>;
			system-clock-direction = "out";
		};

		sound_master: simple-audio-card,codec {
			sound-dai = <&wm8904>;
			system-clock-frequency = <24000000>;
			system-clock-direction = "in";
		};
	};
	
	backlight {
		compatible = "pwm-backlight";

		pwms = <&ecap0 0 50000 PWM_POLARITY_INVERTED>;
		brightness-levels = <0 51 53 56 62 75 101 152 255>;
		default-brightness-level = <6>;
	};
	lcd0: display {
		compatible = "newhaven,nhd-4.3-480272ef-atxl", "panel-dpi";
		label = "lcd";

		/* If there is a enable pin in LCD sch. you need to add this!
		*pinctrl-names = "default";
		*pinctrl-0 = <&lcd_pins>;
		*
		*enable-gpios = <&gpio1 7 GPIO_ACTIVE_HIGH>; */

		panel-timing {
			/*This is the timing for HDMI&VGA*/
			/*clock-frequency = <80000000>;
			hactive = <1024>;
			vactive = <768>;
			hfront-porch = <18>;
			hback-porch = <297>;
			hsync-len = <53>;
			vfront-porch = <3>;
			vback-porch = <35>;
			vsync-len = <6>;
			hsync-active = <0>;
			vsync-active = <0>;
			de-active = <1>;
			pixelclk-active = <1>;*/

			/*This is the timing for 4.3inch_LCD && VGA ch7026 (input 480*272,output 800*600)*/
			/*clock-frequency = <9000000>;
			hactive = <480>;
			vactive = <272>;
			hfront-porch = <2>;
			hback-porch = <43>;
			hsync-len = <41>;
			vfront-porch = <2>;
			vback-porch = <12>;
			vsync-len = <10>;
			hsync-active = <0>;
			vsync-active = <0>;
			de-active = <1>;
			pixelclk-active = <1>;*/

			/*This is the timing for 7inch_LCD*/
			/*clock-frequency = <9000000>;
			hactive = <320>;
			vactive = <240>;
			hfront-porch = <64>;
			hback-porch = <10>;
			hsync-len = <16>;
			vfront-porch = <32>;
			vback-porch = <10>;
			vsync-len = <3>;
			hsync-active = <0>;
			vsync-active = <0>;
			de-active = <1>;
			pixelclk-active = <1>;*/

			/*This is the timing for VGA ch7026 (input 640*480,output 800*600)*/
			clock-frequency = <48000000>;
			hactive = <640>;
			vactive = <480>;
			hfront-porch = <20>;
			hback-porch = <80>;
			hsync-len = <41>;
			vfront-porch = <20>;
			vback-porch = <35>;
			vsync-len = <10>;
			hsync-active = <0>;
			vsync-active = <0>;
			de-active = <1>;
			pixelclk-active = <1>;

		};

		port {
			lcd_in: endpoint {
				remote-endpoint = <&dpi_out>;
			};
		};
	};	
};

&cpu {
	cpu0-supply = <&dcdc2>;
};
/* This is needed for LCD*/
&dss {
	status = "okay";

	pinctrl-names = "default";
	pinctrl-0 = <&dss_pins>;

	port {
		dpi_out: endpoint@0 {
			remote-endpoint = <&lcd_in>;
			data-lines = <24>;
		};
	};
};

/* This is needed for LCD*/
&sgx {
	status = "okay";
};
&uart0 {
	status = "okay";
	pinctrl-names = "default";
	pinctrl-0 = <&uart0_pins>;
};

&uart1 {
	status = "okay";
	pinctrl-names = "default";
	pinctrl-0 = <&uart1_pins>;
};

&uart3 {
	pinctrl-names = "default";
	pinctrl-0 = <&uart3_pins>;
	status = "okay";

	rs485-rts-active-high;
	linux,rs485-enabled-at-boot-time;
	rs485-rts-delay = <200 0>;                // in milliseconds
	rts-gpio = <&gpio5 1 GPIO_ACTIVE_HIGH>;
};

&uart5 {
	pinctrl-names = "default";
	pinctrl-0 = <&uart5_pins>;
	status = "okay";
};

&usb2_phy1 {
	status = "okay";
};

&usb1 {
	dr_mode = "otg";
	status = "okay";
	pinctrl-names = "default";
	pinctrl-0 = <&usb1_pins>;
};

&usb2_phy2 {
	status = "okay";
};

&usb2 {
	dr_mode = "host";
	status = "okay";
	pinctrl-names = "default";
	pinctrl-0 = <&usb2_pins>;
};

&dcan0 {
	pinctrl-names = "default";
	pinctrl-0 = <&can0_pins>;
	status = "okay";
};

&dcan1 {
	pinctrl-names = "default";
	pinctrl-0 = <&can1_pins>;
	status = "okay";
};

&i2c0 {
	status = "okay";
	pinctrl-names = "default";
	pinctrl-0 = <&i2c0_pins>;
	clock-frequency = <100000>;

	tps@24 {
		compatible = "ti,tps65218";
		reg = <0x24>;
		interrupts = <GIC_SPI 7 IRQ_TYPE_LEVEL_HIGH>;
		interrupt-controller;
		#interrupt-cells = <2>;

		dcdc1: regulator-dcdc1 {
			compatible = "ti,tps65218-dcdc1";
			/* VDD_CORE limits min of OPP50 and max of OPP100 */
			regulator-name = "vdd_core";
			regulator-min-microvolt = <912000>;
			regulator-max-microvolt = <1144000>;
			regulator-boot-on;
			regulator-always-on;
		};

		dcdc2: regulator-dcdc2 {
			compatible = "ti,tps65218-dcdc2";
			/* VDD_MPU limits min of OPP50 and max of OPP_NITRO */
			regulator-name = "vdd_mpu";
			regulator-min-microvolt = <912000>;
			regulator-max-microvolt = <1378000>;
			regulator-boot-on;
			regulator-always-on;
		};

		dcdc3: regulator-dcdc3 {
			compatible = "ti,tps65218-dcdc3";
			regulator-name = "vdds_ddr";
			regulator-min-microvolt = <1350000>;
			regulator-max-microvolt = <1350000>;
			regulator-boot-on;
			regulator-always-on;
			regulator-state-mem {
				regulator-on-in-suspend;
			};
			regulator-state-disk {
				regulator-off-in-suspend;
			};
		};

		dcdc4: regulator-dcdc4 {
			compatible = "ti,tps65218-dcdc4";
			regulator-name = "v3_3d";
			regulator-min-microvolt = <3300000>;
			regulator-max-microvolt = <3300000>;
			regulator-boot-on;
			regulator-always-on;
		};

		dcdc5: regulator-dcdc5 {
			compatible = "ti,tps65218-dcdc5";
			regulator-name = "v1_0bat";
			regulator-min-microvolt = <1000000>;
			regulator-max-microvolt = <1000000>;
			regulator-boot-on;
			regulator-always-on;
			regulator-state-mem {
				regulator-on-in-suspend;
			};
		};

		dcdc6: regulator-dcdc6 {
			compatible = "ti,tps65218-dcdc6";
			regulator-name = "v1_8bat";
			regulator-min-microvolt = <1800000>;
			regulator-max-microvolt = <1800000>;
			regulator-boot-on;
			regulator-always-on;
			regulator-state-mem {
				regulator-on-in-suspend;
			};
		};

		ldo1: regulator-ldo1 {
			compatible = "ti,tps65218-ldo1";
			regulator-name = "v1_8d";
			regulator-min-microvolt = <1800000>;
			regulator-max-microvolt = <1800000>;
			regulator-boot-on;
			regulator-always-on;
		};

		power-button {
			compatible = "ti,tps65218-pwrbutton";
			status = "okay";
			interrupts = <3 IRQ_TYPE_EDGE_BOTH>;
		};
	};

	at24@50 {
		compatible = "at24,24c256";
		pagesize = <64>;
		reg = <0x50>;
	};

	at24@57 {
		compatible = "at24,24c256";
		pagesize = <64>;
		reg = <0x57>;
	};

	wm8904: wm8904@1a {
		#sound-dai-cells = <0>;
		compatible = "wlf,wm8904";
		reg = <0x1a>;
		status = "okay";

		/* Regulators */
		AVDD-supply = <&ldo1>;
		DCVDD-supply = <&ldo1>;
		DBVDD-supply = <&ldo1>;
		CPVDD-supply = <&ldo1>;
		MICVDD-supply = <&dcdc4>;
	};
};

&i2c1 {
	status = "okay";
	pinctrl-names = "default";
	pinctrl-0 = <&i2c1_pins>;
	clock-frequency = <400000>;

	rx8025: rx8025@32 {
		compatible = "epson,rx8025";
		reg = <0x32>;
		status = "okay";
	};


};

&i2c2 {
	status = "okay";
	pinctrl-names = "default";
	pinctrl-0 = <&i2c2_pins>;
	clock-frequency = <400000>;

	PCA954x: PCA954x@70{
		compatible = "nxp,pca9543";
		#address-cells = <1>;
		#size-cells = <0>;
		
		reg = <0x70>;
		status = "okay";		

	};

	ch7026@76 {
		compatible = "chrontel,ch7026";
		pinctrl-names = "default";
		pinctrl-0 = <&ch7620_reset_pin>;		
		gpios = <&gpio1 20 GPIO_ACTIVE_HIGH>;
		reg = <0x76>;
		status = "okay";
	};

	ov5640@3c {
		compatible = "ovti,ov5640";
		reg = <0x3c>;
		pinctrl-names = "default";
		pinctrl-0 = <&clkout2_pin>;	

		clocks = <&clkout2_ck>;
		clock-names = "mclk";
		assigned-clocks = <&clkout2_mux_ck>, <&clkout2_post_div_ck>;
		assigned-clock-parents = <&sysclk_div>;
		assigned-clock-rates = <0>, <12500000>;		

		pwn = <&gpio4 3 GPIO_ACTIVE_HIGH>;
		rst = <&gpio1 22 GPIO_ACTIVE_LOW>;
		/*rst = <&gpio0 19 GPIO_ACTIVE_LOW>;*/
		port {
			ov5640_1: endpoint {
				remote-endpoint = <&vpfe0_ep>;
				link-frequencies = /bits/ 64 <70000000>;
			};
		};
	};	

};
&vpfe0 {
	status = "okay";
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&vpfe0_pins_default>;
	pinctrl-1 = <&vpfe0_pins_sleep>;

	port {
		vpfe0_ep: endpoint {
			remote-endpoint = <&ov5640_1>;
			ti,am437x-vpfe-interface = <0>;
			bus-width = <8>;
			hsync-active = <0>;
			vsync-active = <0>;
		};
	};	
};

&mmc1 {
	status = "okay";
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&mmc1_pins>;
	pinctrl-1 = <&mmc1_pins_sleep>;

	vmmc-supply = <&dcdc4>;
	bus-width = <4>;
	cd-gpios = <&gpio0 6 GPIO_ACTIVE_HIGH>;
};

/* eMMC sits on mmc2 */
&mmc2
{
	/*
	* When enabling eMMC, disable GPMC/NAND and set
	* SelEMMCorNAND to output-high
	*/
	status = "okay";
	vmmc-supply = <&dcdc4>;
	bus-width = <8>;
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&emmc_pins_default>;
	pinctrl-1 = <&emmc_pins_sleep>;
	ti,non-removable;
};

&gpio0 {
	status = "okay";
};
	
&gpio1 {
	status = "okay";
};
&gpio2 {
	status = "okay";
};

&gpio3 {
	status = "okay";
};
&gpio4 {
	status = "okay";
};

/* This is needed for LED according to LED pins */
&gpio5 {
	status = "okay";
};

&rtc {
	status = "okay";
	ext-clk-src;
};

&mac {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&cpsw_default>;
	dual_emac = <1>;
	status = "okay";
};

&davinci_mdio {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&davinci_mdio_default>;
	status = "okay";
};

&cpsw_emac0 {
	phy_id = <&davinci_mdio>, <7>;
	phy-mode = "rgmii";
	dual_emac_res_vlan = <1>;
};

&tscadc {
	status = "okay";

	adc {
		ti,adc-channels = <0 1 2 3 4 5 6 7>;
		ti,chan-step-opendelay = <0x98 0x98 0x98 0x98 0x098 0x98 0x098 0x0>;
		ti,chan-step-sampledelay = <0x0f 0x0f 0x0f 0x0f 0x0f 0x0 0xf 0x0>;
		ti,chan-step-avg = <8 8 8 8 8 2 4 8>;
	};
};

&spi4 {
	pinctrl-names = "default";
	pinctrl-0 = <&spi4_pins>;
	ti,pindir-d0-out-d1-in = <1>;
	status = "okay";

	tsc2046: tsc2046@0 {
		pinctrl-names = "default";
		pinctrl-0 = <&tsc2046_irq_pins>;	
		spi-max-frequency = <1000000>;
		reg = <0>; 
		compatible = "ti,tsc2046";
		interrupt-parent = <&gpio1>;
		interrupts = <18 0>;
		pendown-gpio = <&gpio1 18 0>;
		
		ti,x-min = /bits/ 16 <0>;
		ti,x-max = /bits/ 16 <8000>;
		ti,y-min = /bits/ 16 <0>;
		ti,y-max = /bits/ 16 <4800>;
		ti,x-plate-ohms = /bits/ 16 <40>;
		ti,pressure-max = /bits/ 16 <255>;
		
		vcc-supply = <&dcdc4>;
	};
};

&mcasp0 {
	#sound-dai-cells = <0>;
	pinctrl-names = "default";
	pinctrl-0 = <&mcasp0_pins>;
	status = "okay";
	op-mode = <0>;
	tdm-slots = <2>;
    
	serial-dir = <
		1 0  2 0
	>;

	tx-num-evt = <1>;
	rx-num-evt = <1>;
};

/* This is needed for backlight */
&epwmss0 {
	status = "okay";
};

/* This is needed for backlight */
&ecap0 {
	status = "okay";
	pinctrl-names = "default";
	pinctrl-0 = <&ecap0_pins>;
};

&spi2 {
	pinctrl-names = "default";
	pinctrl-0 = <&spi2_pins>;
	ti,pindir-d0-out-d1-in = <1>;
	status = "okay";

	m25p32@0 {
		compatible = "m25p32";
		spi-max-frequency = <108000000>;
		reg = <0>;
		spi-cpol;
		spi-cpha;
		spi-tx-bus-width = <1>;
		spi-rx-bus-width = <1>;
		#address-cells = <1>;
		#size-cells = <1>;
	};
};

&am43xx_pinmux {
	/* UART0 pins: rxd & txd */
	uart0_pins: pinmux_uart0_pins {
		pinctrl-single,pins = <
			0x170 (PIN_INPUT_PULLUP | MUX_MODE0)	/* uart0_rxd.uart0_rxd */
			0x174 (PIN_OUTPUT_PULLDOWN | MUX_MODE0)	/* uart0_txd.uart0_txd */
		>;
	};
	
	/* UART1 pins: rxd & txd */
	uart1_pins: pinmux_uart1_pins {
		pinctrl-single,pins = <
			0x180 (PIN_INPUT_PULLUP | MUX_MODE0)	/* uart1_rxd.uart1_rxd */
			0x184 (PIN_OUTPUT_PULLDOWN | MUX_MODE0)	/* uart1_txd.uart1_txd */
		>;
	};

	/* UART3 pins: rxd & txd */
	uart3_pins: pinmux_uart3_pins {
		pinctrl-single,pins = <
			0x228 (PIN_INPUT_PULLUP | MUX_MODE0)	/* uart3_rxd.uart3_rxd */
			0x22c (PIN_OUTPUT_PULLDOWN | MUX_MODE0)	/* uart3_txd.uart3_txd */
			0x234 (PIN_OUTPUT_PULLDOWN | MUX_MODE7)	/* uart3_rts.gpio5_1   */
		>;
	};

	/* UART5 pins: rxd & txd */
	uart5_pins: pinmux_uart5_pins {
		pinctrl-single,pins = <
			0x108 (PIN_INPUT_PULLUP | MUX_MODE3)	/* mii1_col.uart5_rxd */
			0x144 (PIN_OUTPUT_PULLDOWN | MUX_MODE3)	/* rmii1_refclk.uart5_txd */
			//0x10c (PIN_OUTPUT_PULLDOWN | MUX_MODE7)	/* ctsn */
			//0x110 (PIN_OUTPUT_PULLDOWN | MUX_MODE7) /* rtsn */
			//0x1dc (PIN_OUTPUT_PULLUP | MUX_MODE7)	/* BT_EN */
		>;
	};

	usb1_pins: usb1_pins {
		pinctrl-single,pins = <
			0x2c0 (PIN_OUTPUT | MUX_MODE0) /* usb0_drvvbus.usb0_drvvbus */
		>;
	};

	usb2_pins: usb2_pins {
		pinctrl-single,pins = <
			0x2c4 (PIN_OUTPUT | MUX_MODE0) /* usb1_drvvbus.usb1_drvvbus */
		>;
	};	

	/* CAN0 pins: rxd & txd */
	can0_pins: pinmux_can0_pins {
		pinctrl-single,pins = <
			0x17C (PIN_INPUT_PULLUP | MUX_MODE2)	/* uart1_rtsn.can0_rxd */
			0x178 (PIN_OUTPUT_PULLDOWN | MUX_MODE2)	/* uart1_ctsn.can0_txd */
		>;
	};
    
	/* CAN1 pins: rxd & txd */
	can1_pins: pinmux_can1_pins {
		pinctrl-single,pins = <
			0x16C (PIN_INPUT_PULLUP | MUX_MODE2)	/* uart0_rtsn.can1_rxd */
			0x168 (PIN_OUTPUT_PULLDOWN | MUX_MODE2)	/* uart0_ctsn.can1_txd */
		>;
	};
	
	/* I2C0 pins: sda & scl */
	i2c0_pins: i2c0_pins {
		pinctrl-single,pins = <
			0x188 (PIN_INPUT | SLEWCTRL_FAST | MUX_MODE0)  /* i2c0_sda.i2c0_sda */
			0x18c (PIN_INPUT | SLEWCTRL_FAST | MUX_MODE0)  /* i2c0_scl.i2c0_scl */
		>;
	};

	/* I2C2 pins: sda & scl */
	i2c2_pins: i2c2_pins {
		pinctrl-single,pins = <
			0x154 (PIN_INPUT | SLEWCTRL_FAST | MUX_MODE2)  /* i2c0_sda.i2c0_sda */
			0x150 (PIN_INPUT | SLEWCTRL_FAST | MUX_MODE2)  /* i2c0_scl.i2c0_scl */
		>;
	};
	
	/* MMC1 pins:  data0 - data3; clk; cmd; detect pin */
	mmc1_pins: pinmux_mmc1_pins {
		pinctrl-single,pins = <
			0x0f0 (PIN_INPUT | MUX_MODE0) /* mmc0_dat3.mmc0_dat3 */
			0x0f4 (PIN_INPUT | MUX_MODE0) /* mmc0_dat2.mmc0_dat2 */
			0x0f8 (PIN_INPUT | MUX_MODE0) /* mmc0_dat1.mmc0_dat1 */
			0x0fc (PIN_INPUT | MUX_MODE0) /* mmc0_dat0.mmc0_dat0 */
			0x100 (PIN_INPUT | MUX_MODE0) /* mmc0_clk.mmc0_clk */
			0x104 (PIN_INPUT | MUX_MODE0) /* mmc0_cmd.mmc0_cmd */
			0x160 (PIN_INPUT | MUX_MODE7) /* spi0_cs1.gpio0_6 */
		>;
	};

	/* MMC1 pins:  data0 - data3; clk; cmd; detect pin */
	mmc1_pins_sleep: pinmux_mmc1_pins_sleep {
		pinctrl-single,pins = <
			0x0F0 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x0F4 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x0F8 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x0FC (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x100 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x104 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x1A0 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x160 (PIN_INPUT_PULLDOWN | MUX_MODE7)
		>;
	};

	/* eMMC pins:  data0 - data7; clk; cmd;  */
	emmc_pins_default: emmc_pins_default {
		pinctrl-single,pins = <
			0x00 (PIN_INPUT_PULLUP | MUX_MODE1) /* gpmc_ad0.mmc1_dat0 */
			0x04 (PIN_INPUT_PULLUP | MUX_MODE1) /* gpmc_ad1.mmc1_dat1 */
			0x08 (PIN_INPUT_PULLUP | MUX_MODE1) /* gpmc_ad2.mmc1_dat2 */
			0x0c (PIN_INPUT_PULLUP | MUX_MODE1) /* gpmc_ad3.mmc1_dat3 */
			0x10 (PIN_INPUT_PULLUP | MUX_MODE1) /* gpmc_ad4.mmc1_dat4 */
			0x14 (PIN_INPUT_PULLUP | MUX_MODE1) /* gpmc_ad5.mmc1_dat5 */
			0x18 (PIN_INPUT_PULLUP | MUX_MODE1) /* gpmc_ad6.mmc1_dat6 */
			0x1c (PIN_INPUT_PULLUP | MUX_MODE1) /* gpmc_ad7.mmc1_dat7 */
			0x80 (PIN_INPUT_PULLUP | MUX_MODE2) /* gpmc_csn1.mmc1_clk */
			0x84 (PIN_INPUT_PULLUP | MUX_MODE2) /* gpmc_csn2.mmc1_cmd */
		>;
	};

	emmc_pins_sleep: emmc_pins_sleep {
		pinctrl-single,pins = <
			0x00 (PIN_INPUT_PULLDOWN | MUX_MODE7) /* gpmc_ad0.gpio1_0 */
			0x04 (PIN_INPUT_PULLDOWN | MUX_MODE7) /* gpmc_ad1.gpio1_1 */
			0x08 (PIN_INPUT_PULLDOWN | MUX_MODE7) /* gpmc_ad2.gpio1_2 */
			0x0c (PIN_INPUT_PULLDOWN | MUX_MODE7) /* gpmc_ad3.gpio1_3 */
			0x10 (PIN_INPUT_PULLDOWN | MUX_MODE7) /* gpmc_ad4.gpio1_4 */
			0x14 (PIN_INPUT_PULLDOWN | MUX_MODE7) /* gpmc_ad5.gpio1_5 */
			0x18 (PIN_INPUT_PULLDOWN | MUX_MODE7) /* gpmc_ad6.gpio1_6 */
			0x1c (PIN_INPUT_PULLDOWN | MUX_MODE7) /* gpmc_ad7.gpio1_7 */
			0x80 (PIN_INPUT_PULLDOWN | MUX_MODE7) /* gpmc_csn1.gpio1_30 */
			0x84 (PIN_INPUT_PULLDOWN | MUX_MODE7) /* gpmc_csn2.gpio1_31 */
		>;
	};

	user_leds: user_leds {
		pinctrl-single,pins = <
			0x240 (PIN_OUTPUT | MUX_MODE7)	/* gpmc_csn3.gpio5_10 */			
			0x248 (PIN_OUTPUT | MUX_MODE7)	/* gpmc_ben1.gpio5_12 */		
		>;
	};

	buzzer_pin: buzzer_pin {
		pinctrl-single,pins = <
			0x08c (PIN_OUTPUT | MUX_MODE9)	/* gpmc_clk.gpio0_4 */
		>;
	};

	ch7620_reset_pin:ch7620_reset_pin {
		pinctrl-single,pins = <
			0x050 (PIN_OUTPUT | MUX_MODE7) 
		>;
	};
	gpio_keys_pins_default: gpio_keys_pins_default {
		pinctrl-single,pins = <
			0x078 (PIN_INPUT | MUX_MODE7)	/*gpmc_be1n.gpio1_28 */
		>;
	};
	
	cpsw_default: cpsw_default {
		pinctrl-single,pins = <
			/* Slave 1 */
			0x12c (PIN_OUTPUT | MUX_MODE2)	/* mii1_txclk.rmii1_tclk */
			0x114 (PIN_OUTPUT | MUX_MODE2)	/* mii1_txen.rgmii1_tctl */
			0x128 (PIN_OUTPUT | MUX_MODE2)	/* mii1_txd0.rgmii1_td0 */
			0x124 (PIN_OUTPUT | MUX_MODE2)	/* mii1_txd1.rgmii1_td1 */
			0x120 (PIN_OUTPUT | MUX_MODE2)	/* mii1_txd0.rgmii1_td2 */
			0x11c (PIN_OUTPUT | MUX_MODE2)	/* mii1_txd1.rgmii1_td3 */
			0x130 (PIN_INPUT | MUX_MODE2)	/* mii1_rxclk.rmii1_rclk */
			0x118 (PIN_INPUT | MUX_MODE2)	/* mii1_rxdv.rgmii1_rctl */
			0x140 (PIN_INPUT | MUX_MODE2)	/* mii1_rxd0.rgmii1_rd0 */
			0x13c (PIN_INPUT | MUX_MODE2)	/* mii1_rxd1.rgmii1_rd1 */
			0x138 (PIN_INPUT | MUX_MODE2)	/* mii1_rxd0.rgmii1_rd2 */
			0x134 (PIN_INPUT | MUX_MODE2)	/* mii1_rxd1.rgmii1_rd3 */

			/* Slave 2 */
			0x58 (PIN_OUTPUT | MUX_MODE2)	/* gpmc_a6.rgmii2_tclk */
			0x40 (PIN_OUTPUT | MUX_MODE2)	/* gpmc_a0.rgmii2_tctl */
			0x54 (PIN_OUTPUT | MUX_MODE2)	/* gpmc_a5.rgmii2_td0 */
			0x50 (PIN_OUTPUT | MUX_MODE2)	/* gpmc_a4.rgmii2_td1 */
			0x4c (PIN_OUTPUT | MUX_MODE2)	/* gpmc_a3.rgmii2_td2 */
			0x48 (PIN_OUTPUT | MUX_MODE2)	/* gpmc_a2.rgmii2_td3 */
			0x5c (PIN_INPUT | MUX_MODE2)	/* gpmc_a7.rgmii2_rclk */
			0x44 (PIN_INPUT | MUX_MODE2)	/* gpmc_a1.rgmii2_rtcl */
			0x6c (PIN_INPUT | MUX_MODE2)	/* gpmc_a11.rgmii2_rd0 */
			0x68 (PIN_INPUT | MUX_MODE2)	/* gpmc_a10.rgmii2_rd1 */
			0x64 (PIN_INPUT | MUX_MODE2)	/* gpmc_a9.rgmii2_rd2 */
			0x60 (PIN_INPUT | MUX_MODE2)	/* gpmc_a8.rgmii2_rd3 */
		>;
	};
	
	davinci_mdio_default: davinci_mdio_default {
		pinctrl-single,pins = <
			/* MDIO */
			0x148 (PIN_INPUT | SLEWCTRL_FAST | MUX_MODE0)	/* mdio_data.mdio_data */
			0x14c (PIN_OUTPUT | MUX_MODE0)			/* mdio_clk.mdio_clk */
		>;
	};
	
	/* I2C1 pins: sda & scl */
	i2c1_pins: i2c1_pins {
		pinctrl-single,pins = <
			0x15c (PIN_INPUT_PULLDOWN | SLEWCTRL_FAST | MUX_MODE2)  /* spi0_cs0.i2c1_scl */
			0x158 (PIN_INPUT_PULLDOWN | SLEWCTRL_FAST | MUX_MODE2)  /* spi0_d1.i2c1_sda  */
		>;
	};
	
	spi4_pins: pinmux_spi4_pins {
		pinctrl-single,pins = <
			0x250 (PIN_INPUT_PULLUP | MUX_MODE0)  /* spi4_sclk.spi4_sclk */
			0x254 (PIN_OUTPUT_PULLUP | MUX_MODE0) /* spi4_d0.spi4_d0 */
			0x258 (PIN_INPUT_PULLUP | MUX_MODE0)  /* spi4_d1.spi4_d1 */
			0x25C (PIN_OUTPUT_PULLUP | MUX_MODE0) /* spi4_cs0.spi4_cs0 */
		>;
	};
	
	tsc2046_irq_pins: tsc2046_irq_pins{
		pinctrl-single,pins = <
			0x48 (PIN_INPUT | MUX_MODE7)	    /* gpmc_a2.gpio1_18 */
		>;
	};
	
	mcasp0_pins: mcasp0_pins {
		pinctrl-single,pins = <
			/*0x270 (PIN_OUTPUT_PULLDOWN | MUX_MODE3)	 xdma_event_intr0.clkout1 */
			0x194 (PIN_INPUT_PULLDOWN | MUX_MODE0)	/* mcasp0_fsx.mcasp0_fsx */
			0x198 (PIN_OUTPUT_PULLDOWN | MUX_MODE0)	/* mcasp0_axr0.mcasp0_axr0 */
			0x19c (PIN_INPUT_PULLDOWN | MUX_MODE2)	/* mcasp0_ahclkr.mcasp0_axr2  */
			0x190 (PIN_INPUT_PULLDOWN | MUX_MODE0)	/* mcasp0_aclkx.mcasp0_aclkx */
		>;
	};
	
	ecap0_pins: backlight_pins {
		pinctrl-single,pins = <
			0x164 (PIN_OUTPUT | MUX_MODE0) /* eCAP0_in_PWM0_out.eCAP0_in_PWM0_out */
		>;
	};
	
	spi2_pins: pinmux_spi2_pins {
		pinctrl-single,pins = <
			0x260 (PIN_INPUT_PULLUP | MUX_MODE0) /* spi2_sclk.spi2_sclk */
			0x264 (PIN_OUTPUT_PULLUP | MUX_MODE0) /* spi2_d0.spi2_d0 */
			0x268 (PIN_INPUT_PULLUP | MUX_MODE0) /* spi2_d1.spi2_d1 */
			0x26C (PIN_OUTPUT_PULLUP | MUX_MODE0) /* spi2_cs0.spi2_cs0 */
		>;
	};
	dss_pins: dss_pins {
		pinctrl-single,pins = <
			0x020 (PIN_OUTPUT | MUX_MODE1)	/* gpmc ad 8 -> DSS DATA 23 */
			0x024 (PIN_OUTPUT | MUX_MODE1)
			0x028 (PIN_OUTPUT | MUX_MODE1)
			0x02c (PIN_OUTPUT | MUX_MODE1)
			0x030 (PIN_OUTPUT | MUX_MODE1)
			0x034 (PIN_OUTPUT | MUX_MODE1)
			0x038 (PIN_OUTPUT | MUX_MODE1)
			0x03c (PIN_OUTPUT | MUX_MODE1)	/* gpmc ad 15 -> DSS DATA 16 */
			0x0a0 (PIN_OUTPUT | MUX_MODE0)	/* DSS DATA 0 */
			0x0a4 (PIN_OUTPUT | MUX_MODE0)
			0x0a8 (PIN_OUTPUT | MUX_MODE0)
			0x0ac (PIN_OUTPUT | MUX_MODE0)
			0x0b0 (PIN_OUTPUT | MUX_MODE0)
			0x0b4 (PIN_OUTPUT | MUX_MODE0)
			0x0b8 (PIN_OUTPUT | MUX_MODE0)
			0x0bc (PIN_OUTPUT | MUX_MODE0)
			0x0c0 (PIN_OUTPUT | MUX_MODE0)
			0x0c4 (PIN_OUTPUT | MUX_MODE0)
			0x0c8 (PIN_OUTPUT | MUX_MODE0)
			0x0cc (PIN_OUTPUT | MUX_MODE0)
			0x0d0 (PIN_OUTPUT | MUX_MODE0)
			0x0d4 (PIN_OUTPUT | MUX_MODE0)
			0x0d8 (PIN_OUTPUT | MUX_MODE0)
			0x0dc (PIN_OUTPUT | MUX_MODE0)	/* DSS DATA 15 */
			0x0e0 (PIN_OUTPUT | MUX_MODE0)	/* DSS VSYNC */
			0x0e4 (PIN_OUTPUT | MUX_MODE0)	/* DSS HSYNC */
			0x0e8 (PIN_OUTPUT | MUX_MODE0)	/* DSS PCLK */
			0x0ec (PIN_OUTPUT | MUX_MODE0)	/* DSS AC BIAS EN */

		>;
	};
	
		
	vpfe0_pins_default: vpfe0_pins_default {
		pinctrl-single,pins = <
			0x1B0 (PIN_INPUT_PULLUP | MUX_MODE0)  /* cam0_hd mode 0*/
			0x1B4 (PIN_INPUT_PULLUP | MUX_MODE0)  /* cam0_vd mode 0*/
			0x1C0 (PIN_INPUT_PULLUP | MUX_MODE0)  /* cam0_pclk mode 0*/
			0x1C4 (PIN_INPUT_PULLUP | MUX_MODE0)  /* cam0_data8 mode 0*/
			0x1C8 (PIN_INPUT_PULLUP | MUX_MODE0)  /* cam0_data9 mode 0*/
			0x208 (PIN_INPUT_PULLUP | MUX_MODE0)  /* cam0_data0 mode 0*/
			0x20C (PIN_INPUT_PULLUP | MUX_MODE0)  /* cam0_data1 mode 0*/
			0x210 (PIN_INPUT_PULLUP | MUX_MODE0)  /* cam0_data2 mode 0*/
			0x214 (PIN_INPUT_PULLUP | MUX_MODE0)  /* cam0_data3 mode 0*/
			0x218 (PIN_INPUT_PULLUP | MUX_MODE0)  /* cam0_data4 mode 0*/
			0x21C (PIN_INPUT_PULLUP | MUX_MODE0)  /* cam0_data5 mode 0*/
			0x220 (PIN_INPUT_PULLUP | MUX_MODE0)  /* cam0_data6 mode 0*/
			0x224 (PIN_INPUT_PULLUP | MUX_MODE0)  /* cam0_data7 mode 0*/
		>;
	};

	vpfe0_pins_sleep: vpfe0_pins_sleep {
		pinctrl-single,pins = <
			0x1B0 (DS0_PULL_UP_DOWN_EN | INPUT_EN | MUX_MODE7)  /* cam0_hd mode 0*/
			0x1B4 (DS0_PULL_UP_DOWN_EN | INPUT_EN | MUX_MODE7)  /* cam0_vd mode 0*/
			0x1C0 (DS0_PULL_UP_DOWN_EN | INPUT_EN | MUX_MODE7)  /* cam0_pclk mode 0*/
			0x1C4 (DS0_PULL_UP_DOWN_EN | INPUT_EN | MUX_MODE7)  /* cam0_data8 mode 0*/
			0x1C8 (DS0_PULL_UP_DOWN_EN | INPUT_EN | MUX_MODE7)  /* cam0_data9 mode 0*/
			0x208 (DS0_PULL_UP_DOWN_EN | INPUT_EN | MUX_MODE7)  /* cam0_data0 mode 0*/
			0x20C (DS0_PULL_UP_DOWN_EN | INPUT_EN | MUX_MODE7)  /* cam0_data1 mode 0*/
			0x210 (DS0_PULL_UP_DOWN_EN | INPUT_EN | MUX_MODE7)  /* cam0_data2 mode 0*/
			0x214 (DS0_PULL_UP_DOWN_EN | INPUT_EN | MUX_MODE7)  /* cam0_data3 mode 0*/
			0x218 (DS0_PULL_UP_DOWN_EN | INPUT_EN | MUX_MODE7)  /* cam0_data4 mode 0*/
			0x21C (DS0_PULL_UP_DOWN_EN | INPUT_EN | MUX_MODE7)  /* cam0_data5 mode 0*/
			0x220 (DS0_PULL_UP_DOWN_EN | INPUT_EN | MUX_MODE7)  /* cam0_data6 mode 0*/
			0x224 (DS0_PULL_UP_DOWN_EN | INPUT_EN | MUX_MODE7)  /* cam0_data7 mode 0*/
		>;
	};
	
	
	clkout2_pin: pinmux_clkout2_pin {
		pinctrl-single,pins = <
			0x274 (PIN_OUTPUT_PULLDOWN | MUX_MODE3)	/* XDMA_EVENT_INTR1/CLKOUT2 */
			0x1bc (PIN_OUTPUT_PULLDOWN | MUX_MODE7)	/* pwn.gpio4_3 */
			0x270 (PIN_OUTPUT_PULLDOWN | MUX_MODE7)	/* rst gpio0_19 */
			0x058 (PIN_OUTPUT_PULLDOWN | MUX_MODE7)	/* rst gpio1_22 */
		>;	
	};
};
